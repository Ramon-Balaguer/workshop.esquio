/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const PokemonServiceApiBaseUrl = new InjectionToken<string>('PokemonServiceApiBaseUrl');

@Injectable()
export class PokedexClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(PokemonServiceApiBaseUrl) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param name (optional)
     * @return Success
     */
    pokedex(name: string | null | undefined): Observable<Pokemon[]> {
        let url_ = this.baseUrl + "/Pokedex?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPokedex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPokedex(<any>response_);
                } catch (e) {
                    return <Observable<Pokemon[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Pokemon[]>><any>_observableThrow(response_);
        }));
    }

    protected processPokedex(response: HttpResponseBase): Observable<Pokemon[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Pokemon.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Pokemon[]>(<any>null);
    }
}

export class PokemonName implements IPokemonName {
    english?: string | undefined;
    japanese?: string | undefined;
    chinese?: string | undefined;
    french?: string | undefined;

    constructor(data?: IPokemonName) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.english = _data["english"];
            this.japanese = _data["japanese"];
            this.chinese = _data["chinese"];
            this.french = _data["french"];
        }
    }

    static fromJS(data: any): PokemonName {
        data = typeof data === 'object' ? data : {};
        let result = new PokemonName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["english"] = this.english;
        data["japanese"] = this.japanese;
        data["chinese"] = this.chinese;
        data["french"] = this.french;
        return data;
    }
}

export interface IPokemonName {
    english?: string | undefined;
    japanese?: string | undefined;
    chinese?: string | undefined;
    french?: string | undefined;
}

export class PokemonStat implements IPokemonStat {
    hp?: number;
    attack?: number;
    defense?: number;
    speedAttack?: number;
    speedDefense?: number;
    speed?: number;

    constructor(data?: IPokemonStat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hp = _data["hp"];
            this.attack = _data["attack"];
            this.defense = _data["defense"];
            this.speedAttack = _data["speedAttack"];
            this.speedDefense = _data["speedDefense"];
            this.speed = _data["speed"];
        }
    }

    static fromJS(data: any): PokemonStat {
        data = typeof data === 'object' ? data : {};
        let result = new PokemonStat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hp"] = this.hp;
        data["attack"] = this.attack;
        data["defense"] = this.defense;
        data["speedAttack"] = this.speedAttack;
        data["speedDefense"] = this.speedDefense;
        data["speed"] = this.speed;
        return data;
    }
}

export interface IPokemonStat {
    hp?: number;
    attack?: number;
    defense?: number;
    speedAttack?: number;
    speedDefense?: number;
    speed?: number;
}

export class Pokemon implements IPokemon {
    id?: number;
    name?: PokemonName;
    type?: string[] | undefined;
    base?: PokemonStat;

    constructor(data?: IPokemon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"] ? PokemonName.fromJS(_data["name"]) : <any>undefined;
            if (Array.isArray(_data["type"])) {
                this.type = [] as any;
                for (let item of _data["type"])
                    this.type!.push(item);
            }
            this.base = _data["base"] ? PokemonStat.fromJS(_data["base"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Pokemon {
        data = typeof data === 'object' ? data : {};
        let result = new Pokemon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        if (Array.isArray(this.type)) {
            data["type"] = [];
            for (let item of this.type)
                data["type"].push(item);
        }
        data["base"] = this.base ? this.base.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPokemon {
    id?: number;
    name?: PokemonName;
    type?: string[] | undefined;
    base?: PokemonStat;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
